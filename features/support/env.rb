# typed: false 
# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'simplecov'
require 'cucumber/rails'
require 'cucumber/rspec/doubles'
require 'capybara-screenshot/cucumber'
require 'email_spec/cucumber'
require 'selenium/webdriver'

# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise RunTimeError("You need to add database_cleaner to your Gemfile "\
                     "(in the :test group) if you wish to use it.")
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

# Code from: https://github.com/teamcapybara/capybara/blob/master/lib/capybara/registrations/drivers.rb
# Switches: https://peter.sh/experiments/chromium-command-line-switches/

# VERSSION NUMBER 1 DID NOT WORK
# Capybara.register_driver :selenium_chrome_headless do |app|
#   browser_options = ::Selenium::WebDriver::Chrome::Options.new.tap do |opts|
#     opts.args << "--window-size=1920,1080"
#     opts.args << "--headless"
#   end
#   Capybara::Selenium::Driver.new(app, browser: :chrome, options: browser_options)
# end
  
# VERSION NUMBER ONE throwed two errors - need to install chromedriver and this:
# The :capabilities parameter for Selenium::WebDriver::Chrome::Driver is deprecated. Use :options argument with an instance of Selenium::WebDriver::Chrome::Driver instead.


# VERSION NUMBER 2DID NOT WORK
# Capybara.register_driver :selenium_chrome_headless do |app|
#   version = Capybara::Selenium::Driver.load_selenium
#   # options_key = Capybara::Selenium::Driver::CAPS_VERSION.satisfied_by?(version) ? Selenium::WebDriver::Chrome::Driver::Options
#   browser_options = ::Selenium::WebDriver::Chrome::Options.new.tap do |opts|
#     opts.add_argument('--window-size=1920,1080')
#     opts.add_argument('--headless')
#     opts.add_argument('--disable-gpu') if Gem.win_platform?
#     # Workaround https://bugs.chromium.org/p/chromedriver/issues/detail?id=2650&q=load&sort=-id&colspec=ID%20Status%20Pri%20Owner%20Summary
#     opts.add_argument('--disable-site-isolation-trials')
#   end

#   Capybara::Selenium::Driver.new(app, **{ :browser => :chrome, :options => browser_options })
# end
  
# Capybara.javascript_driver = :selenium_chrome_headless


# VERSION NUMBER 3 - WORKS NOW
Capybara.default_max_wait_time = 5

Capybara.register_driver :chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end

Capybara.register_driver :headless_chrome do |app|
  capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(
    chromeOptions: { args: %w(headless disable-gpu window-size=1920,1080 no-sandbox) }
  )

  Capybara::Selenium::Driver.new app,
    browser: :chrome,
    desired_capabilities: capabilities
end

Capybara.javascript_driver = :selenium_chrome_headless
Capybara.asset_host = "http://localhost:3001"

#Cucumber FactoryBot need to add this but it is already added in the rails helper
#World(FactoryBot::Syntax::Methods)
